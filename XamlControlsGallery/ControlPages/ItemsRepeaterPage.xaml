<local:ItemsPageBase
    x:Class="AppUIBasics.ControlPages.ItemsRepeaterPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AppUIBasics"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxcontrols="using:Microsoft.UI.Xaml.Controls"
    xmlns:l="using:AppUIBasics.ControlPages"
    xmlns:common="using:AppUIBasics.Common"
    mc:Ignorable="d" FontFamily="Segoe UI">

    <Page.Resources>
        <DataTemplate x:Key="HorizontalBarTemplate" x:DataType="l:Bar">
            <Border Background="{ThemeResource SystemChromeLowColor}" Width="{x:Bind MaxLength}">
                <Rectangle Fill="{ThemeResource SystemAccentColor}" Width="{x:Bind Length}" Height="24" HorizontalAlignment="Left"/>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="VerticalBarTemplate" x:DataType="l:Bar">
            <Border Background="{ThemeResource SystemChromeLowColor}" Height="{x:Bind MaxHeight}">
                <Rectangle Fill="{ThemeResource SystemAccentColor}" Height="{x:Bind Height}" Width="48" VerticalAlignment="Top"/>
            </Border>
        </DataTemplate>

        <DataTemplate x:Key="CircularTemplate" x:DataType="l:Bar">
            <Grid>
                <Ellipse Fill="{ThemeResource SystemChromeLowColor}" Height="{x:Bind MaxDiameter}" Width="{x:Bind MaxDiameter}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                <Ellipse Fill="{ThemeResource SystemAccentColor}" Height="{x:Bind Diameter}" Width="{x:Bind Diameter}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="NormalItemTemplate" x:DataType="x:Int32">
            <Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{ThemeResource SystemChromeLowColor}">
                <TextBlock Text="{x:Bind}" />
            </Button>
        </DataTemplate>

        <DataTemplate x:Key="AccentItemTemplate" x:DataType="x:Int32">
            <Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{ThemeResource SystemAccentColor}">
                <TextBlock Text="{x:Bind}" />
            </Button>
        </DataTemplate>

        <DataTemplate x:Key="StringDataTemplate" x:DataType="x:String">
            <Grid Background="Black" Margin="10">
                <TextBlock Padding="10" Text="{x:Bind}" Foreground="White" HorizontalAlignment="Center" TextWrapping="Wrap" VerticalAlignment="Center"></TextBlock>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="IntDataTemplate" x:DataType="x:Int32">
            <Grid Width="100" Height="100" Margin="10">
                <TextBlock Padding="10" Text="{x:Bind}" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center"></TextBlock>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="ImageTemplate" x:DataType="x:String">
            <StackPanel>
                <Image Height="200" Source="{x:Bind}" Margin="5"></Image>
            </StackPanel>
        </DataTemplate>

        <DataTemplate x:Key="CategoryTemplate" x:DataType="l:NestedCategory">
            <StackPanel>
                <TextBlock Text="{x:Bind CategoryName}" Padding="10" FontSize="30"/>
                <ScrollViewer 
                        HorizontalScrollBarVisibility="Auto"
                        VerticalScrollBarVisibility="Disabled"
                        HorizontalScrollMode="Auto"
                        VerticalScrollMode="Disabled">
                    <muxcontrols:ItemsRepeater 
                                x:Name="innerRepeater"
                                ItemsSource="{x:Bind CategoryItems}"
                                ItemTemplate="{StaticResource ImageTemplate}">
                        <muxcontrols:ItemsRepeater.Layout>
                            <muxcontrols:StackLayout Orientation="Horizontal" />
                        </muxcontrols:ItemsRepeater.Layout>
                    </muxcontrols:ItemsRepeater>
                </ScrollViewer>
            </StackPanel>
        </DataTemplate>

        <muxcontrols:StackLayout x:Name="VerticalStackLayout" Orientation="Vertical" Spacing="8"/>
        <muxcontrols:StackLayout x:Name="HorizontalStackLayout" Orientation="Horizontal" Spacing="8"/>
        <muxcontrols:UniformGridLayout x:Name="UniformGridLayout" MinRowSpacing="8" MinColumnSpacing="8"/>

        <common:ActivityFeedLayout x:Key="MyFeedLayout" ColumnSpacing="12" RowSpacing="12" MinItemSize="80, 108"/>
        <muxcontrols:UniformGridLayout x:Key="UniformGridLayout2" MinItemWidth="108" MinItemHeight="108" MinRowSpacing="12" MinColumnSpacing="12"/>

        <l:MyDataTemplateSelector x:Key="MyDataTemplateSelector"
                                  Normal="{StaticResource NormalItemTemplate}"
                                  Accent="{StaticResource AccentItemTemplate}"/>

        <l:StringOrIntTemplateSelector x:Key="StringOrIntTemplateSelector"
                                       StringTemplate="{StaticResource StringDataTemplate}"
                                       IntTemplate="{StaticResource IntDataTemplate}"/>
    </Page.Resources>

    <StackPanel>
        <local:ControlExample HeaderText="Basic ItemsRepeater">
            <StackPanel>
                <TextBlock Text="This is a basic ItemsRepeater that displays both integer and string items. It uses a DataTemplateSelector to choose the correct layout for each of its items. The full source code for this ItemsRepeater is below." TextWrapping="Wrap"></TextBlock>
                <muxcontrols:ItemsRepeater x:Name="repeater0" 
                                Margin="0,0,12,0"
                                HorizontalAlignment="Stretch"
                                ItemTemplate="{StaticResource StringOrIntTemplateSelector}">

                    <muxcontrols:ItemsRepeater.Layout>
                        <muxcontrols:UniformGridLayout MinItemWidth="200" MinItemHeight="200"></muxcontrols:UniformGridLayout>
                    </muxcontrols:ItemsRepeater.Layout>
                </muxcontrols:ItemsRepeater>
            </StackPanel>
            <local:ControlExample.Xaml>
                    <x:String xml:space="preserve">
&lt;!-- This is the ItemsRepeater used in this example: --&gt;
&lt;ItemsRepeater x:Name="repeater0" 
               Margin="0,0,12,0"
               HorizontalAlignment="Stretch"
               ItemTemplate="{StaticResource StringOrIntTemplateSelector}"
               ItemsSource="{x:Bind StringsAndInts}"&gt;

&lt;!-- The ItemsSource, StringsAndInts, is an ObservableCollection that has both string objects and 
integer objects. The ItemTemplate is a DataTemplateSelector called StringOrIntTemplateSelector, defined 
in the code-behind. --&gt;
                        
&lt;!-- StringOrIntTemplateSelector assesses the type of an item, and returns StringDataTemplate if the 
item is a string, and IntDataTemplate if the item is an integer. The XAML code below binds the 
DataTemplateSelector to those two data templates, and defines each of them. This is shown below: --&gt;
                        
&lt;StringOrIntTemplateSelector x:Key="StringOrIntTemplateSelector"
                             StringTemplate="{StaticResource StringDataTemplate}"
                             IntTemplate="{StaticResource IntDataTemplate}"/&gt;         
                        
&lt;DataTemplate x:Key="StringDataTemplate" x:DataType="x:String"&gt;
    &lt;Grid Background="Black" Margin="10"&gt;
        &lt;TextBlock Padding="10" Text="{x:Bind}" Foreground="White" HorizontalAlignment="Center" 
                   TextWrapping="Wrap" VerticalAlignment="Center"&gt;&lt;/TextBlock&gt;
    &lt;/Grid&gt;
&lt;/DataTemplate&gt;

&lt;DataTemplate x:Key="IntDataTemplate" x:DataType="x:Int32"&gt;
    &lt;Grid Width="100" Height="100" Margin="10"&gt;
        &lt;TextBlock Padding="10" Text="{x:Bind}" FontSize="50" HorizontalAlignment="Center" 
                   VerticalAlignment="Center">&lt;/TextBlock&gt;
    &lt;/Grid&gt;
&lt;/DataTemplate&gt;
                    </x:String>
                </local:ControlExample.Xaml>
            
        </local:ControlExample>
        
        <local:ControlExample HeaderText="Non-interactive items laid out by ItemsRepeater">
            <ScrollViewer HorizontalScrollBarVisibility="Auto" 
                          HorizontalScrollMode="Auto" 
                          IsVerticalScrollChainingEnabled="False"
                          MaxHeight="500">
                <muxcontrols:ItemsRepeater x:Name="repeater"
                               Layout="{StaticResource VerticalStackLayout}"
                               ItemsSource="{x:Bind BarItems}"
                               ItemTemplate="{StaticResource HorizontalBarTemplate}"/>
            </ScrollViewer>
            <local:ControlExample.Options>
                <StackPanel Spacing="12">
                    <Button x:Name="AddBtn" Content="Add Item" Click="AddBtn_Click" MinWidth="150"/>
                    <Button x:Name="DeleteBtn" Content="Remove Item" Click="DeleteBtn_Click" MinWidth="150"/>

                    <RadioButton x:Name="VStackBtn" 
                                 GroupName="Sample1Layouts"
                                 Margin="0,24,0,0"
                                 Content="StackLayout - Vertical"
                                 Click="RadioBtn_Click"
                                 Tag="VerticalStackLayout"
                                 IsChecked="True"/>
                    <RadioButton x:Name="HStackBtn"
                                 GroupName="Sample1Layouts"
                                 Content="StackLayout - Horizontal"
                                 Tag="HorizontalStackLayout"
                                 Click="RadioBtn_Click"/>
                    <RadioButton x:Name="HGridBtn"
                                 GroupName="Sample1Layouts"
                                 Content="UniformGridLayout"
                                 Tag="UniformGridLayout"
                                 Click="RadioBtn_Click"/>
                </StackPanel>
            </local:ControlExample.Options>

            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- The ItemsRepeater and ScrollViewer used: --&gt;
&lt;ScrollViewer HorizontalScrollBarVisibility="Auto" 
                HorizontalScrollMode="Auto" 
                IsVerticalScrollChainingEnabled="False"
                MaxHeight="500"&gt;
    &lt;ItemsRepeater
        ItemsSource="{x:Bind BarItems}"
        Layout="{StaticResource $(Layout)}"
        ItemTemplate="{StaticResource $(ElementGenerator)}" /&gt;
&lt;ScrollViewer/&gt;
                    
&lt;!-- The Layout specifications used: --&gt;
                    
$(displayLayout)     
                    
&lt;!-- The DataTemplate used: --&gt;
                    
$(displayDataTemplate)                    
                    
&lt;!-- All of the options use the same ItemsSource - a list of custom-class Bar objects called BarItems.
Bar objects have the following attributes: Height, MaxHeight, Length, MaxLength, Diameter, and MaxDiameter. --&gt;
    </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.Substitutions>
                <local:ControlExampleSubstitution x:Name="layout" Key="Layout" Value="VerticalStackLayout" />
                <local:ControlExampleSubstitution x:Name="elementGenerator" Key="ElementGenerator" Value="HorizontalBarTemplate" />
                <local:ControlExampleSubstitution x:Name="displayLayout" Key="displayLayout"/>
                <local:ControlExampleSubstitution x:Name="displayDataTemplate" Key="displayDataTemplate"/>
            </local:ControlExample.Substitutions>
        </local:ControlExample>

        <local:ControlExample HeaderText="Browsing within nested ItemsRepeaters">
            <ScrollViewer>
                <muxcontrols:ItemsRepeater 
                x:Name="outerRepeater"
                VerticalAlignment="Top"
                ItemTemplate ="{StaticResource CategoryTemplate}">
                    <muxcontrols:ItemsRepeater.Layout>
                        <muxcontrols:StackLayout Orientation="Vertical" />
                    </muxcontrols:ItemsRepeater.Layout>
                </muxcontrols:ItemsRepeater>
            </ScrollViewer>

            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- The nested ItemsRepeater experience is achieved by creating one ItemsRepeater (outerRepeater below) 
and creating another ItemsRepeater (innerRepeater below) inside the outer one's DataTemplate. Below is the 
outer ItemsRepeater definition and the DataTemplate it uses. --&gt;
                    
&lt;ScrollViewer&gt;
    &lt;ItemsRepeater 
        x:Name="outerRepeater"
        VerticalAlignment="Top"
        ItemTemplate ="{StaticResource CategoryTemplate}"&gt;
        &lt;ItemsRepeater.Layout&gt;
           &lt;StackLayout Orientation="Vertical" /&gt;
        &lt;/ItemsRepeater.Layout&gt;
    &lt;/ItemsRepeater&gt;
&lt;/ScrollViewer&gt;
                    
&lt;DataTemplate x:Key="CategoryTemplate" x:DataType="NestedCategory"&gt;
    &lt;StackPanel&gt;
        &lt;TextBlock Text="{x:Bind CategoryName}" Padding="10" FontSize="30"/&gt;
        &lt;ScrollViewer
            HorizontalScrollBarVisibility="Auto"
            VerticalScrollBarVisibility="Disabled"
            HorizontalScrollMode="Auto"
            VerticalScrollMode="Disabled"&gt;
            &lt;ItemsRepeater 
                    x:Name="innerRepeater"
                    ItemsSource="{x:Bind CategoryItems}"
                    ItemTemplate="{StaticResource ImageTemplate}"&gt;
                &lt;ItemsRepeater.Layout&gt;
                    &lt;StackLayout Orientation="Horizontal" /&gt;
                &lt;/ItemsRepeater.Layout&gt;
            &lt;/ItemsRepeater&gt;
        &lt;/ScrollViewer&gt;
    &lt;/StackPanel&gt;
&lt;/DataTemplate&gt;
                    
&lt;!-- The DataTemplate shown above is bound to a custom-class type called NestedCategory, 
which is defined in the code-behind. NestedCategory objects have the following two attributes: 
a CategoryName (string), and a collection of strings called CategoryItems. Each string in 
this collection represents an image source. --&gt;
                    
&lt;!-- The inner ItemsRepeater is bound to its own, separate DataTemplate called ImageTemplate: --&gt;
                    
&lt;DataTemplate x:Key="ImageTemplate" x:DataType="x:String"&gt;
    &lt;StackPanel&gt;
        &lt;Image Height="200" Source="{x:Bind}" Margin="5">&lt;/Image&gt;
    &lt;/StackPanel&gt;
&lt;/DataTemplate&gt;                  
                </x:String>
            </local:ControlExample.Xaml>
        </local:ControlExample>

        <local:ControlExample HeaderText="Virtualizing, scrollable list of items laid out by ItemsRepeater"
                              HorizontalContentAlignment="Stretch">

            <!-- ItemsRepeaterScrollHost enables ItemsRepeater to coordinate with ScrollViewer down-level.
                 It's not needed on 17700+ builds. -->
            <muxcontrols:ItemsRepeaterScrollHost>
                <ScrollViewer x:Name="scrollViewer"
                              Height="400"
                              IsVerticalScrollChainingEnabled="False"
                              Padding="0,0,16,0">
                    <muxcontrols:ItemsRepeater x:Name="repeater2" 
                                       Margin="0,0,12,0"
                                       HorizontalAlignment="Stretch"
                                       Layout="{StaticResource MyFeedLayout}"
                                       ItemTemplate="{StaticResource MyDataTemplateSelector}"/>
                </ScrollViewer>
            </muxcontrols:ItemsRepeaterScrollHost>

            <local:ControlExample.Options>
                <StackPanel Spacing="12">
                    <RadioButton GroupName="Sample2Layouts" Content="Uniform grid" Tag="UniformGridLayout2" Click="LayoutBtn_Click"/>
                    <RadioButton GroupName="Sample2Layouts" IsChecked="True" Content="Custom virtualizing layout" Tag="MyFeedLayout" Click="LayoutBtn_Click"/>
                </StackPanel>
            </local:ControlExample.Options>

            <local:ControlExample.Xaml>
                <x:String xml:space="preserve">
&lt;!-- The ItemsRepeater and ScrollViewer used: --&gt;
&lt;ScrollViewer x:Name="scrollViewer"
                Height="400"
                IsVerticalScrollChainingEnabled="False"
                Padding="0,0,16,0"&gt;
    &lt;ItemsRepeater
            ItemsSource="{x:Bind NumberedItems}"
            Layout="{StaticResource $(Layout)}"
            ItemTemplate="{StaticResource $(ItemTemplate)}" /&gt;
&lt;ScrollViewer/&gt; 
                    
&lt;!-- The Layout specifications used: --&gt;
                    
$(displayLayout2)     
                    
&lt;!-- The ItemTemplate is bound to a DataTemplateSelector called MyDataTemplateSelector.
MyDataTemplateSelector is defined in the code-behind to return the Accent DataTemplate for 
odd-numbered-items, and returns the Normal DataTemplate for even-numbered-items. The two 
data templates and the XAML declaration of MyDataTemplateSelector are below: --&gt;

&lt;MyDataTemplateSelector x:Key="MyDataTemplateSelector"
                            Normal="{StaticResource NormalItemTemplate}"
                            Accent="{StaticResource AccentItemTemplate}"/&gt;    
                    
&lt;DataTemplate x:Key="NormalItemTemplate" x:DataType="x:Int32"&gt;
    &lt;Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{ThemeResource SystemChromeLowColor}"&gt;
        &lt;TextBlock Text="{x:Bind}" /&gt;
    &lt;/Button&gt;
&lt;/DataTemplate&gt;

&lt;DataTemplate x:Key="AccentItemTemplate" x:DataType="x:Int32"&gt;
    &lt;Button HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{ThemeResource SystemAccentColor}"&gt;
        &lt;TextBlock Text="{x:Bind}" /&gt;
    &lt;/Button&gt;
&lt;/DataTemplate&gt;
                    
&lt;!-- All of the options use the same ItemsSource - a list of integers called NumberedItems.--&gt;
                    
&lt;!-- ActivityFeedLayout is a custom designed virtualizing layout, defined in the code-behind. 
View the XAML Controls Gallery source code to see more details about this custom layout. --&gt;
                    
                </x:String>
            </local:ControlExample.Xaml>
            <local:ControlExample.Substitutions>
                <local:ControlExampleSubstitution x:Name="layout2" Key="Layout" Value="MyFeedLayout" />
                <local:ControlExampleSubstitution Key="ItemTemplate" Value="SimpleItemTemplate" />
                <local:ControlExampleSubstitution x:Name="displayLayout2" Key="displayLayout2"/>
            </local:ControlExample.Substitutions>
        </local:ControlExample>

    </StackPanel>
</local:ItemsPageBase>
